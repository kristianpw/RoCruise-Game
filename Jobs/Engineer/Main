local progress = script.Parent.Progress
local button = script.Parent.button
local active = script.Parent.Active
local debounce = false
local owner = script.Parent.owner
local Progress2 = script.Parent.Progress2
local checkpoint = script.Parent.checkpoint
local eventint = game.Workspace.engineerevent:FindFirstChild("event")


local progresslights = {
	script.Parent.progress1,
	script.Parent.progress2,
	script.Parent.progress3
}

local colors = {
	{name = "Black", color = Color3.fromRGB(27, 42, 53)},
	{name = "Bright red", color = Color3.fromRGB(196, 40, 28)},
	{name = "Bright green", color = Color3.fromRGB(75, 151, 75)},
	{name = "Medium stone grey", color = Color3.fromRGB(163, 162, 165)}
}

local display1 = {
	script.Parent.digit1a,
	script.Parent.digit2a,
	script.Parent.digit3a,
	script.Parent.digit4a
}

local display2 = {
	script.Parent.digit1b,
	script.Parent.digit2b,
	script.Parent.digit3b,
	script.Parent.digit4b
}

local colordisplays = {
	script.Parent.A,
	script.Parent.B,
	script.Parent.C,
	script.Parent.D
}

local screen = {
	script.Parent.A,
	script.Parent.B,
	script.Parent.C,
	script.Parent.D,
	script.Parent.digit1b,
	script.Parent.digit2b,
	script.Parent.digit3b,
	script.Parent.digit4b,
	script.Parent.digit1a,
	script.Parent.digit2a,
	script.Parent.digit3a,
	script.Parent.digit4a,
	script.Parent.screenbr,
	script.Parent.screenbl,
	script.Parent.screentr,
	script.Parent.screentl,
	script.Parent.enddisplay,
	script.Parent.startdisplay
}

local order

local function shuffleorder()
	order = math.random(1,4)
	display1[order].Color = colors[2].color
	display2[order].Color = colors[2].color
end


local function buttontouched(parthit)
	if debounce == true then
		return
	end
	if parthit ~= nil then
		local player = parthit.Parent:FindFirstChild("Humanoid")
		if player ~= nil then
			local playername = parthit.Parent.Name
			local playerjob = game.Players:FindFirstChild(playername).Misc.Job
			if active.Value == 0 and debounce == false and playerjob.Value == 5 then --checks if program not running and players job is engineer
				debounce = true
				owner.Value = playername
				shuffleorder()
				active.Value = 1
				task.wait(2)
				debounce = false
			elseif active.Value == 1 and debounce == false and playerjob.Value == 5 then
				if progress.Value == order and Progress2.Value == 2 then --pressed button at right time, last checkpoint, player won
					debounce = true
					local playercash = game.Players:FindFirstChild(playername).leaderstats.Cash
					local jobstat = game.Players:FindFirstChild(playername).PlayerStats.EngineerJob
					playercash.Value += 10
					jobstat.Value += 1
					local moneystat = game.Players:FindFirstChild(playername).PlayerStats.MoneyEarned
					moneystat.Value += 10
					active.Value = 0
					progress.Value = 0
					Progress2.Value = 3
					checkpoint.Value = 0
					
					for i = 1, #progresslights do
						progresslights[i].Color = colors[3].color
					end
					
					script.Parent.progress3.Color = Color3.fromRGB(75, 151, 75)
					for i = 1, #screen do
						screen[i].Color = colors[3].color
					end
					task.wait(0.2)
					for i = 1, #screen do
						screen[i].Color = colors[1].color
					end
					task.wait(0.2)
					for i = 1, #screen do
						screen[i].Color = colors[3].color
					end
					task.wait(0.2)
					for i = 1, #screen do
						screen[i].Color = colors[1].color
					end
					task.wait(0.2)
					for i = 1, #screen do
						screen[i].Color = colors[3].color
					end
					task.wait(0.2)
					for i = 1, #screen do
						screen[i].Color = colors[1].color
					end
					task.wait(0.5)
					
					local eventrng = math.random(1,20)
					if eventrng == 20 then
						print("random event")
						eventint.Value = 1
					end
					
					for i = 1, #progresslights do
						progresslights[i].Color = colors[4].color
					end
					
					debounce = false
				elseif progress.Value == order and Progress2.Value == 1 and debounce == false then --pressed button at right time, 2nd checkpoint
					debounce = true
					button.Reflectance = 1
					Progress2.Value = Progress2.Value + 1
					checkpoint.Value = 1
					script.Parent.progress2.Color = Color3.fromRGB(75, 151, 75)
					for i = 1, #display1 do
						display1[i].Color = colors[1].color
					end
					for i = 1, #display2 do
						display2[i].Color = colors[1].color
					end
					task.wait(1)
					shuffleorder()
					task.wait(1)
					button.Reflectance = 0
					debounce = false
				elseif progress.Value == order and Progress2.Value == 0 and debounce == false then --pressed button at right time, 1st checkpoint
					debounce = true
					button.Reflectance = 1
					checkpoint.Value = 1
					script.Parent.progress1.Color = Color3.fromRGB(75, 151, 75)
					Progress2.Value = Progress2.Value + 1
					for i = 1, #display1 do
						display1[i].Color = colors[1].color
					end
					for i = 1, #display2 do
						display2[i].Color = colors[1].color
					end
					task.wait(1)
					shuffleorder()
					task.wait(1)
					button.Reflectance = 0
					debounce = false
				elseif progress.Value ~= order and debounce == false then --pressed button at wrong time
					debounce = true
					button.Reflectance = 1
					checkpoint.Value = 0
					Progress2.Value = 0
					for i = 1, #display1 do
						display1[i].Color = colors[1].color
					end
					for i = 1, #display2 do
						display2[i].Color = colors[1].color
					end
					
					for i = 1, #progresslights do
						progresslights[i].Color = colors[1].color
					end
					task.wait(0.2)
					for i = 1, #progresslights do
						progresslights[i].Color = colors[4].color
					end
					task.wait(0.2)
					for i = 1, #progresslights do
						progresslights[i].Color = colors[1].color
					end
					task.wait(0.2)
					for i = 1, #progresslights do
						progresslights[i].Color = colors[4].color
					end
					task.wait(0.2)
					for i = 1, #progresslights do
						progresslights[i].Color = colors[1].color
					end
					task.wait(0.2)
					for i = 1, #progresslights do
						progresslights[i].Color = colors[4].color
					end
					task.wait(0.2)
					
					task.wait(2)
					button.Reflectance = 0
					debounce = false
				end
			end
		end
	end
end

button.Touched:Connect(buttontouched)